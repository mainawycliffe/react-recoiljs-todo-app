{"version":3,"sources":["app/Store.tsx","defaultTodos.tsx","app/AddTodos.tsx","app/SearchTodos.tsx","app/TodosView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["todoListState","atom","key","default","todo","isDone","todoQueryState","filteredTodosState","selector","get","filter","todosList","toLowerCase","includes","AddTodos","useState","todoInputValue","setTodoInputValue","todoExistsErrorClass","setTodoExistsErrorClass","setTodoList","useSetRecoilState","className","onKeyDown","state","length","onChange","value","target","placeholder","SearchBox","setQuery","query","useRecoilValue","type","ListTodos","todoList","toggleTodo","todos","map","todoInState","style","cursor","TodoItem","role","onClick","icon","faCheckSquare","faSquare","App","TopBar","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.254a884f.chunk.js","sourcesContent":["import { selector, atom } from 'recoil';\nimport { Todo } from './todoType';\nimport { defaultTodoList } from '../defaultTodos';\n\n// we will store the list of todos in its own state\nexport const todoListState = atom<Todo[]>({\n  key: 'todoListState',\n  default: defaultTodoList,\n});\n\n// we will store the query in its own state\nexport const todoQueryState = atom({\n  key: 'todoQueryState',\n  default: '', // no query\n});\n\n// use selector to be able to search and filter the todo list in todoListState\n// store. Learn more https://recoiljs.org/docs/basic-tutorial/selectors\nexport const filteredTodosState = selector({\n  key: 'searchedTodoState',\n  get: ({ get }) => {\n    const filter = get(todoQueryState);\n    const todosList = get(todoListState);\n    // return the whole list if query is not set\n    if (filter === '') {\n      return todosList;\n    }\n    // use the filter word to return only todos matches the query\n    return todosList.filter((todo) => todo.todo.toLowerCase().includes(filter));\n  },\n});\n","import { Todo } from './app/todoType';\n\nexport const defaultTodoList: Todo[] = [\n  {\n    todo: 'Cook Supper',\n    isDone: true,\n  },\n  {\n    todo: 'Buy Bread',\n    isDone: false,\n  },\n  {\n    todo: 'Buy Milk',\n    isDone: false,\n  },\n  {\n    todo: 'Buy Flowers',\n    isDone: false,\n  },\n];\n","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport { todoListState } from './Store';\n\nexport default function AddTodos() {\n  const [todoInputValue, setTodoInputValue] = useState('');\n  const [todoExistsErrorClass, setTodoExistsErrorClass] = useState('');\n  const setTodoList = useSetRecoilState(todoListState);\n\n  function addTodo({ key }: KeyboardEvent<HTMLInputElement>) {\n    if (key === 'Enter') {\n      const todo = { todo: todoInputValue, isDone: false };\n      setTodoList((state) => {\n        const alreadyExists = state.filter(\n          (todo) => todo.todo.toLowerCase() === todoInputValue.toLowerCase()\n        );\n        if (alreadyExists.length > 0) {\n          setTodoExistsErrorClass('is-danger');\n          return state;\n        }\n        return [...state, todo];\n      });\n      setTodoInputValue('');\n    }\n  }\n\n  function onChange({ target: { value } }: ChangeEvent<HTMLInputElement>) {\n    setTodoInputValue(value);\n    setTodoExistsErrorClass('');\n  }\n\n  return (\n    <>\n      <h2 className=\"subtitle is-3\">Add Todo</h2>\n      <div className=\"field\">\n        <div className=\"control\">\n          <input\n            onKeyDown={addTodo}\n            onChange={onChange}\n            value={todoInputValue}\n            className={`input is-large is-rounded ${todoExistsErrorClass}`}\n            placeholder=\"Buy Bread, Buy Milk ...\"\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n","import { useSetRecoilState, useRecoilValue } from 'recoil';\nimport React, { ChangeEvent } from 'react';\nimport { todoQueryState } from './Store';\n\nexport default function SearchBox() {\n  const setQuery = useSetRecoilState(todoQueryState);\n  const query = useRecoilValue(todoQueryState);\n\n  function onChange({ target: { value } }: ChangeEvent<HTMLInputElement>) {\n    // a better approach is to use the onKeyUp event, then check for the enter key\n    setQuery(() => value);\n  }\n\n  return (\n    <>\n      <div className=\"field is-fullwidth\">\n        <div className=\"control\">\n          <input\n            className=\"input is-large is-rounded\"\n            type=\"text\"\n            placeholder=\"Search for todos\"\n            onChange={onChange}\n            value={query}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n","import { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { Todo } from './todoType';\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckSquare } from '@fortawesome/free-solid-svg-icons';\nimport { faSquare } from '@fortawesome/free-regular-svg-icons';\nimport { filteredTodosState, todoListState } from './Store';\n\nexport default function ListTodos() {\n  const todoList = useRecoilValue(filteredTodosState);\n  const setTodoList = useSetRecoilState(todoListState);\n\n  function toggleTodo(todo: Todo) {\n    setTodoList((state) => {\n      const todos = state.map((todoInState) => {\n        if (todo.todo.toLowerCase() === todoInState.todo.toLowerCase()) {\n          return {\n            ...todoInState,\n            isDone: !todoInState.isDone,\n          };\n        }\n        return todoInState;\n      });\n      return [...todos];\n    });\n  }\n\n  return (\n    <>\n      <h2 className=\"subtitle is-3\">Your Todos</h2>\n      <div className=\"list is-full is-hoverable\">\n        <div\n          style={{\n            cursor: 'pointer',\n          }}\n          className=\"list-item\"\n        >\n          {todoList.map((todo) => (\n            <TodoItem key={todo.todo} todo={todo} toggleTodo={toggleTodo} />\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\ntype TodoItemProps = {\n  todo: Todo;\n  toggleTodo: (todo: Todo) => void;\n};\n\nfunction TodoItem({ todo, toggleTodo }: TodoItemProps) {\n  return (\n    <>\n      <div role=\"button\" className=\"columns\" onClick={() => toggleTodo(todo)}>\n        <div className=\"column\">\n          <div className=\"content is-large\">{todo.todo}</div>\n        </div>\n        <div className=\"column is-narrow\">\n          <div className=\"content is-large\">\n            {todo.isDone && <FontAwesomeIcon icon={faCheckSquare} />}\n            {!todo.isDone && <FontAwesomeIcon icon={faSquare} />}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport './../node_modules/bulma/css/bulma.min.css';\nimport AddTodos from './app/AddTodos';\nimport SearchBox from './app/SearchTodos';\nimport ListTodos from './app/TodosView';\n\nexport default function App() {\n  return (\n    <RecoilRoot>\n      <TopBar />\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"columns\">\n            <div className=\"column\">\n              <div className=\"columns is-multiline\">\n                <div className=\"column is-full\">\n                  <AddTodos />\n                </div>\n                <div className=\"column is-full\">\n                  <ListTodos />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </RecoilRoot>\n  );\n}\n\nfunction TopBar() {\n  return (\n    <>\n      <nav\n        className=\"navbar is-dark\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-menu\">\n            <div className=\"navbar-item column\">\n              <SearchBox />\n            </div>\n          </div>\n        </div>\n      </nav>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}